services:
  # Combined Frontend + Backend Service
  - type: web
    name: todo-app
    env: python
    buildCommand: |
      set -e
      
      echo "=== Build Environment Info ==="
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      
      echo "=== Node.js Setup ==="
      node --version || echo "Node.js not found"
      npm --version || echo "NPM not found"
      
      echo "=== Frontend Build Process ==="
      if [ ! -d "frontend" ]; then
        echo "ERROR: frontend directory not found!"
        echo "Available directories:"
        ls -la
        exit 1
      fi
      
      cd frontend
      echo "Frontend directory contents:"
      ls -la
      
      # Check if package.json exists
      if [ ! -f "package.json" ]; then
        echo "ERROR: package.json not found in frontend directory!"
        exit 1
      fi
      
      # Set environment variables for React build
      export NODE_ENV=production
      export REACT_APP_API_URL=""
      export REACT_APP_GOOGLE_CLIENT_ID="1061629015725-2vtips7lb4cmn2kd66qighirp368gf4b.apps.googleusercontent.com"
      export GENERATE_SOURCEMAP=false
      
      echo "Installing frontend dependencies..."
      npm install --verbose
      
      echo "Building frontend with environment variables..."
      echo "NODE_ENV=$NODE_ENV"
      echo "REACT_APP_API_URL=$REACT_APP_API_URL"
      echo "REACT_APP_GOOGLE_CLIENT_ID=$REACT_APP_GOOGLE_CLIENT_ID"
      
      npm run build --verbose
      
      # Verify build was successful
      if [ ! -d "build" ]; then
        echo "ERROR: Frontend build failed - no build directory created!"
        echo "Checking for any build artifacts:"
        ls -la
        echo "Checking npm logs:"
        npm run build || true
        exit 1
      fi
      
      echo "✅ Frontend build successful!"
      echo "Build directory contents:"
      ls -la build/
      
      # Verify critical files exist
      if [ ! -f "build/index.html" ]; then
        echo "ERROR: build/index.html not found!"
        exit 1
      fi
      
      # Check static directory
      if [ -d "build/static" ]; then
        echo "Static directory contents:"
        find build/static -type f -name "*.js" -o -name "*.css" | head -10
      else
        echo "WARNING: build/static directory not found!"
      fi
      
      # Show what files index.html is trying to load
      echo "Files referenced in index.html:"
      grep -o 'src="[^"]*"' build/index.html || true
      grep -o 'href="[^"]*\.css"' build/index.html || true
      
      echo "=== Backend Dependencies ==="
      cd ..
      
      if [ ! -f "requirements.txt" ]; then
        echo "ERROR: requirements.txt not found in root directory!"
        echo "Root directory contents:"
        ls -la
        exit 1
      fi
      
      echo "Installing Python dependencies from root requirements.txt..."
      pip install -r requirements.txt
      
      echo "=== Final Verification ==="
      echo "Verifying build directory exists:"
      if [ -d "frontend/build" ]; then
        echo "✅ frontend/build directory exists"
        echo "Total files in build:"
        find frontend/build -type f | wc -l
        echo "JavaScript files:"
        find frontend/build -name "*.js" | head -5
        echo "CSS files:"
        find frontend/build -name "*.css" | head -5
      else
        echo "❌ frontend/build directory missing!"
        exit 1
      fi
      
      echo "=== Build completed successfully! ==="
    startCommand: "cd backend && gunicorn --bind 0.0.0.0:$PORT app:app"
    envVars:
      - key: FLASK_ENV
        value: production
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: todo-db
          property: connectionString
      - key: GOOGLE_CLIENT_ID
        value: 1061629015725-2vtips7lb4cmn2kd66qighirp368gf4b.apps.googleusercontent.com
      - key: GOOGLE_CLIENT_SECRET
        value: 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
      - key: JWT_SECRET_KEY
        value: 1ZmP9YJu916BES4-6qeumsm_qeO48ktV_UcR6EL-gK4
      - key: MAIL_SERVER
        value: smtp.gmail.com
      - key: MAIL_PORT
        value: 587
      - key: MAIL_USE_TLS
        value: True
      - key: MAIL_USERNAME
        value: shwetay1508@gmail.com
      - key: MAIL_PASSWORD
        value: bjzdrpuqoyqabsca
      - key: MAIL_DEFAULT_SENDER
        value: shwetay1508@gmail.com

databases:
  - name: todo-db
    databaseName: todoapp
    user: todouser
